#!/usr/bin/env python3
"""
Scanner et cartographe de r√©seau OpenThread
D√©couvre automatiquement tous les n≈ìuds et construit la topologie compl√®te
"""

import asyncio
import socket
import struct
import json
import time
from datetime import datetime
from typing import List, Set
from .network_topology import NetworkTopology

# Configuration
COAP_PORT = 5683
NETWORK_INFO_URI = "network-info"
SCAN_TIMEOUT = 5  # secondes
RETRY_COUNT = 2

class OpenThreadScanner:
    """Scanner pour d√©couvrir et cartographier un r√©seau OpenThread"""

    def __init__(self, known_addresses: List[str] = None, address_names: dict = None):
        self.topology = NetworkTopology()
        self.discovered_ips: Set[str] = set()
        self.known_addresses = known_addresses or []
        self.address_names = address_names or {}  # Mapping IPv6 -> nom
        self.sock = None

    def create_coap_get(self, uri_path: str) -> bytes:
        """Cr√©e un paquet CoAP GET"""
        # Header CoAP GET NON-confirmable
        message_id = int(time.time()) % 0xFFFF
        header = struct.pack('!BBH',
                           0x50,  # Ver=1, Type=NON (1), TKL=0
                           0x01,  # Code=GET (0.01)
                           message_id)

        # Option Uri-Path
        uri_bytes = uri_path.encode('utf-8')
        option_header = bytes([0xB0 + len(uri_bytes)])  # Delta=11 (Uri-Path)

        return header + option_header + uri_bytes

    def parse_coap_response(self, data: bytes) -> tuple:
        """Parse une r√©ponse CoAP et retourne (code, payload)"""
        if len(data) < 4:
            return None, None

        code = data[1]
        code_class = code >> 5
        code_detail = code & 0x1F

        # Trouver le payload marker (0xFF)
        offset = 4  # Skip header
        token_length = data[0] & 0x0F
        offset += token_length

        # Parser les options pour trouver le payload
        payload = b''
        while offset < len(data):
            if data[offset] == 0xFF:  # Payload marker
                offset += 1
                payload = data[offset:]
                break

            # Skip option
            byte = data[offset]
            option_delta = (byte >> 4) & 0x0F
            option_length = byte & 0x0F
            offset += 1

            # G√©rer les deltas/longueurs √©tendus
            if option_delta == 13:
                offset += 1
            elif option_delta == 14:
                offset += 2

            if option_length == 13:
                option_length = 13 + data[offset]
                offset += 1
            elif option_length == 14:
                option_length = 269 + struct.unpack('!H', data[offset:offset+2])[0]
                offset += 2

            offset += option_length

        return f"{code_class}.{code_detail:02d}", payload

    async def query_node(self, ipv6: str) -> dict:
        """Interroge un n≈ìud sp√©cifique sur /network-info (async)"""
        def _query_sync():
            """Requ√™te synchrone dans un thread s√©par√©"""
            try:
                sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
                sock.settimeout(2)

                request = self.create_coap_get(NETWORK_INFO_URI)
                sock.sendto(request, (ipv6, COAP_PORT))

                data, addr = sock.recvfrom(4096)
                sock.close()

                code, payload = self.parse_coap_response(data)

                if code and code.startswith("2.") and payload:
                    json_str = payload.decode('utf-8', errors='ignore')
                    return json.loads(json_str)

            except socket.timeout:
                pass
            except Exception:
                pass

            return None

        # Ex√©cuter dans un thread pour ne pas bloquer l'event loop
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, _query_sync)

    async def scan_multicast(self) -> Set[str]:
        """Scan via multicast CoAP pour d√©couvrir les n≈ìuds"""
        # Multicast d√©sactiv√© sur macOS (probl√®me de routage IPv6)
        # Utiliser uniquement le scan par adresses connues
        return set()

        print("\nüîç Scanning r√©seau via multicast CoAP...")

        discovered = set()

        # Adresses multicast √† tester
        multicast_addrs = [
            "ff03::1",  # Realm-local all nodes
            "ff02::1",  # Link-local all nodes
        ]

        for mcast_addr in multicast_addrs:
            try:
                sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
                sock.settimeout(1)

                # Envoyer une requ√™te multicast
                request = self.create_coap_get("network-info")
                sock.sendto(request, (mcast_addr, COAP_PORT))

                # Collecter les r√©ponses pendant SCAN_TIMEOUT secondes
                start_time = time.time()
                while time.time() - start_time < SCAN_TIMEOUT:
                    try:
                        data, addr = sock.recvfrom(4096)
                        source_ip = addr[0]

                        # Nettoyer l'adresse (enlever le scope ID)
                        if '%' in source_ip:
                            source_ip = source_ip.split('%')[0]

                        if source_ip not in discovered:
                            discovered.add(source_ip)
                            print(f"  ‚úì N≈ìud d√©couvert: {source_ip}")

                    except socket.timeout:
                        break

                sock.close()

            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur scan multicast {mcast_addr}: {e}")

        return discovered

    async def scan_known_addresses(self) -> Set[str]:
        """Scan les adresses connues depuis adresses.json (en parall√®le)"""
        print("\nüìã Scanning adresses connues...")

        discovered = set()

        # Cr√©er toutes les t√¢ches de requ√™te en parall√®le
        tasks = [self.query_node(ipv6) for ipv6 in self.known_addresses]

        # Ex√©cuter toutes les requ√™tes en parall√®le
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # Traiter les r√©sultats
        for ipv6, result in zip(self.known_addresses, results):
            if isinstance(result, Exception):
                print(f"  ‚ö†Ô∏è  Node inactif: {ipv6} (erreur: {result})")
            elif result:
                discovered.add(ipv6)
                print(f"  ‚úì Node actif: {ipv6}")
            else:
                print(f"  ‚ö†Ô∏è  Node inactif: {ipv6}")

        return discovered

    async def build_topology(self):
        """Construit la topologie compl√®te du r√©seau"""
        print("\nüó∫Ô∏è  Construction de la topologie...")

        # D√©couvrir les n≈ìuds
        discovered_nodes = set()

        # M√©thode 1: Multicast
        multicast_nodes = await self.scan_multicast()
        discovered_nodes.update(multicast_nodes)

        # M√©thode 2: Adresses connues
        if self.known_addresses:
            known_nodes = await self.scan_known_addresses()
            discovered_nodes.update(known_nodes)

        if not discovered_nodes:
            print("‚ùå Aucun n≈ìud d√©couvert!")
            return

        print(f"\nüìä Total: {len(discovered_nodes)} n≈ìuds d√©couverts")

        # Interroger tous les n≈ìuds en parall√®le pour obtenir les d√©tails
        print("\nüîé Interrogation des n≈ìuds...")
        tasks = [self.query_node(ipv6) for ipv6 in discovered_nodes]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # Traiter les r√©sultats
        for ipv6, result in zip(discovered_nodes, results):
            if isinstance(result, Exception):
                print(f"  ‚ùå {ipv6}: Erreur ({result})")
            elif result:
                node = self.topology.add_node_from_network_info(ipv6, result)
                if node:
                    # Ajouter le nom si disponible dans le mapping
                    if ipv6 in self.address_names:
                        node.name = self.address_names[ipv6]

                    node_label = f"{node.name} ({node.rloc16})" if node.name else node.rloc16
                    print(f"  ‚úì {node_label} - {node.role}")
                    print(f"    ExtAddr: {node.ext_addr}")
                    print(f"    Children: {len(node.children)}")
                    print(f"    Neighbors: {len(node.neighbors)}")
            else:
                print(f"  ‚ùå {ipv6}: Impossible d'obtenir les infos r√©seau")

    def display_results(self):
        """Affiche les r√©sultats du scan"""
        print("\n" + "="*60)
        print("üåê TOPOLOGIE DU R√âSEAU OPENTHREAD")
        print("="*60)

        # Statistiques
        stats = self.topology.get_statistics()
        print(f"\nüìä Statistiques:")
        print(f"  ‚Ä¢ Nom du r√©seau: {stats['network_name']}")
        print(f"  ‚Ä¢ Partition ID: {stats['partition_id']}")
        print(f"  ‚Ä¢ Total n≈ìuds: {stats['total_nodes']}")
        print(f"  ‚Ä¢ Leaders: {stats['leaders']}")
        print(f"  ‚Ä¢ Routers: {stats['routers']}")
        print(f"  ‚Ä¢ End Devices: {stats['children']}")
        print(f"  ‚Ä¢ Profondeur max: {stats['max_depth']}")
        print(f"  ‚Ä¢ Derni√®re mise √† jour: {stats['last_update']}")

        # Arbre hi√©rarchique
        print(f"\nüå≥ Hi√©rarchie du r√©seau:")
        print("-"*60)
        self.topology.print_tree()
        print()

    def export_results(self, base_filename: str = "openthread_topology"):
        """Exporte les r√©sultats dans diff√©rents formats"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # JSON
        json_file = f"{base_filename}_{timestamp}.json"
        self.topology.save_to_file(json_file)

        # Graphviz
        dot_file = f"{base_filename}_{timestamp}.dot"
        self.topology.export_graphviz(dot_file)

        print(f"\nüíæ R√©sultats export√©s:")
        print(f"  ‚Ä¢ JSON: {json_file}")
        print(f"  ‚Ä¢ Graphviz: {dot_file}")


async def main():
    """Fonction principale"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         OPENTHREAD NETWORK MAPPER                         ‚ïë
‚ïë         D√©couverte et cartographie automatique            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    # Charger les adresses connues depuis adresses.json
    known_addresses = []
    address_names = {}  # Mapping IPv6 -> nom du n≈ìud
    try:
        with open('config/adresses.json', 'r') as f:
            data = json.load(f)
            nodes = data.get('nodes', {})
            for node_name, node_data in nodes.items():
                if isinstance(node_data, dict):
                    addr = node_data.get('address')
                    if addr:
                        known_addresses.append(addr)
                        address_names[addr] = node_name
                else:
                    known_addresses.append(node_data)

        print(f"üìã {len(known_addresses)} adresses charg√©es depuis adresses.json")

    except FileNotFoundError:
        print("‚ö†Ô∏è  Fichier adresses.json non trouv√© - scan multicast uniquement")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lecture adresses.json: {e}")

    # Cr√©er le scanner avec le mapping des noms
    scanner = OpenThreadScanner(known_addresses=known_addresses, address_names=address_names)

    # Scanner le r√©seau
    await scanner.build_topology()

    # Afficher les r√©sultats
    scanner.display_results()

    # Exporter
    scanner.export_results()

    print("\n‚úÖ Scan termin√©!\n")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå Scan interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
